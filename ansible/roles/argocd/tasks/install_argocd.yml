---
- name: Install dependencies
  ansible.builtin.apt:
    name: python3-pip
    state: present

- name: Install Kubernetes Python client and friends
  ansible.builtin.pip:
    name:
      - "kubernetes"
    state: present
    break_system_packages: true

- name: Ensure namespace argocd is present
  kubernetes.core.k8s:
    kubeconfig: "{{ argocd_kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: argocd

- name: Fetch Argo CD upstream install manifest
  ansible.builtin.get_url:
    url: "{{ argocd_manifest_url }}"
    dest: "{{ argocd_manifest_local }}"
    mode: "0644"
  register: download_argocd

- name: Apply Argo CD manifest
  kubernetes.core.k8s:
    kubeconfig: "{{ argocd_kubeconfig_path }}"
    src: "{{ argocd_manifest_local }}"
    state: present
    namespace: argocd
  register: argocd_apply

- name: Disable TLS on server
  kubernetes.core.k8s:
    kubeconfig: "{{ argocd_kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: argocd-cmd-params-cm
        namespace: argocd
      data:
        server.insecure: "true"
  notify: ARGOCD | Restart ArgoCD-Server

- name: Apply ArgoCD Ingress
  kubernetes.core.k8s:
    kubeconfig: "{{ argocd_kubeconfig_path }}"
    state: present
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: argocd-server
        namespace: argocd
      spec:
        ingressClassName: traefik
        rules:
          - host: argocd.cindergla.de
            http:
              paths:
                - backend:
                    service:
                      name: argocd-server
                      port:
                        number: 80
                  path: /
                  pathType: Prefix


- name: Apply ArgoCD ApplicationSet
  kubernetes.core.k8s:
    kubeconfig: "{{ argocd_kubeconfig_path }}"
    state: present
    definition: |
      {% raw %}
      apiVersion: argoproj.io/v1alpha1
      kind: ApplicationSet
      metadata:
        name: argo-applications
        namespace: argocd
      spec:
        generators:
          - git:
              repoURL: https://github.com/rawrnekton/homelab.git
              revision: HEAD
              directories:
                - path: "manifests/argo_applications/*"
        template:
          metadata:
            name: '{{path.basename}}'
          spec:
            project: default
            source:
              repoURL: https://github.com/rawrnekton/homelab.git
              targetRevision: HEAD
              path: '{{path}}'
              kustomize: {}
            destination:
              server: https://kubernetes.default.svc
              namespace: '{{path.basename}}'
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
      {% endraw %}

- name: Patch ArgoCD to allow helm
  kubernetes.core.k8s:
    kubeconfig: "{{ argocd_kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: argocd-cm
        namespace: argocd
      data:
        kustomize.buildOptions: --enable-helm

- name: Enable OIDC login to argocd with authentik
  kubernetes.core.k8s:
    kubeconfig: "{{ argocd_kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: argocd-cm
        namespace: argocd
      data:
        url: https://argocd.cindergla.de
        dex.config: |
            connectors:
            - config:
                issuer: https://auth.cindergla.de/application/o/argocd/
                clientID: "{{ argocd_authentik_oauth_client_id }}"
                clientSecret: "{{ argocd_authentik_oauth_client_secret }}"
                insecureEnableGroups: true
                scopes:
                  - openid
                  - profile
                  - email
              name: authentik
              type: oidc
              id: authentik

- name: Enable admin role mapping from authentik role
  kubernetes.core.k8s:
    kubeconfig: "{{ argocd_kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: argocd-rbac-cm
        namespace: argocd
      data:
        policy.csv: |
          g, argocd Admin, role:admin

- name: Disable default local admin user
  kubernetes.core.k8s:
    kubeconfig: "{{ argocd_kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: argocd-cm
        namespace: argocd
        labels:
          app.kubernetes.io/name: argocd-cm
          app.kubernetes.io/part-of: argocd
      data:
        admin.enabled: "false"
