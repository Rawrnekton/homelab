#!/usr/bin/env bash
# this script takes an ansible-vault encrypted env file and 
# creates a sealed secret that gets added to the kustomization.yml of the overlay
#
# this was created for managing (sealed) secrets in my homelab
# it assumes the following structure is present 
# but does not check for it:
#
# .
# ├── kustomization.yml
# ├── sealed-secrets
# │   ├── kustomization.yaml
# │   └── secret-sealed.yaml
# └── secrets
#     └── namespace
#         └── secret.env
#
# secret.env is encrypted with ansible-vault and looks like this:
# ENVIRONMENT_VARIABLE_KEY=verysensitivedata
#
# (see any of the overlay subdirs if this is unclear)
# the sealed secret will be created in a sub-directory called "sealed-secrets" 
# two levels above and added to the kustomization.yml there
# the namespace of the secret will be set to the parent directory of the secret.env
#
# install this to PATH with something like
# sudo install -m 755 ./scripts/seal-secret /usr/local/bin/seal-secret

set -euo pipefail

FILE=${1:?Usage: seal-secret <env-file>}
VAULT_PASSWORD_FILE="$(git rev-parse --show-toplevel)/ansible/.vaultpw"

FILE_PATH=$(realpath "$FILE")
SAVEDIR=$(dirname $(dirname $(dirname "$FILE_PATH")))
NAMESPACE=$(basename $(dirname "$FILE_PATH"))
BASENAME=$(basename "$FILE_PATH" .env)

# I am aware that kubeseal supports "raw" mode, but this is still marked as experimenatl at this time
# hence this
ansible-vault view "$FILE_PATH" --vault-password-file "$VAULT_PASSWORD_FILE" \
  | kubectl create secret generic "$BASENAME" \
    --from-env-file=/dev/stdin \
    --dry-run=client \
    -n $NAMESPACE \
    -o yaml \
  | kubeseal -o yaml \
    > "${SAVEDIR}/sealed-secrets/${NAMESPACE}-${BASENAME}-sealed.yaml"

cd $SAVEDIR/sealed-secrets/ && kustomize edit add resource *sealed.yaml > /dev/null

echo "Sealed secret created at: ${SAVEDIR}/sealed-secrets/${NAMESPACE}-${BASENAME}-sealed.yaml"
